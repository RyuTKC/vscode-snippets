{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
  "Next Page":{
		"scope": "typescriptreact",
    "description": "next func component",
    "prefix": "ne:page",
    "body": [
      "import { NextPage } from 'next'",
      "",
      "interface Props {",
      "  userAgent?: string;",
      "}",
      "",
      "const Page: NextPage<Props> = ({ userAgent }) => (",
      "  <main>Your user agent: {userAgent}</main>",
      ")",
      "",
      "// Page.getInitialProps = async ({ req }) => {",
      "//   const userAgent = req ? req.headers['user-agent'] : navigator.userAgent",
      "//   return { userAgent }",
      "// }",
      "",
      "export default Page",
    ]
  },
  "Next StaticProps pure": {
		"scope": "typescript,typescriptreact",
    "description": "getStaticProps pure",
    "prefix": "ne:gsp-pure",
    "body": [
      "import { GetStaticProps } from 'next'",
      "",
      "type ${1:Data} = {",
      "  ${2:data1}: ${3|string,number|}",
      "  ${4:data2}: ${5|string,number|}",
      "}",
      "",
      "export const getStaticProps: GetStaticProps<{ ${6:datas}: $1[] }> = async (",
      "  context",
      ") => {",
      "  const res = await fetch('${7:http://example.com}')",
      "  const $6: $1[] = await res.json()",
      "",
      "  return {",
      "    props: {",
      "      $6,",
      "    },",
      "    // revalidate: 3600",
      "  }",
      "}",
    ],
  },
  "Next StaticProps infer": {
		"scope": "typescript,typescriptreact",
    "description": "getStaticProps infer",
    "prefix": "ne:gsp-infer",
    "body": [
      "import type { InferGetStaticPropsType, GetStaticProps } from 'next'",
      "",
      "type ${1:Data} = {",
      "  ${2:data1}: ${3|string,number|}",
      "  ${4:data2}: ${5|string,number|}",
      "}",
      "",
      "export const getStaticProps: GetStaticProps<{ ${6:datas}: $1[] }> = async () => {",
      "  const res = await fetch('${7:http://example.com}')",
      "  const $6: $1[] = await res.json()",
      "",
      "  return {",
      "    props: {",
      "      $6,",
      "    },",
      "    // revalidate: 3600",
      "  }",
      "}",
      "",
      "function ${8:TransedData}({ $6 }: InferGetStaticPropsType<typeof getStaticProps>) {",
      "  // will resolve datas to type $1[]",
      "}",
      "",
      "export default $8"
    ],
  },
  "Next StaticProps infer inplicit": {
		"scope": "typescript,typescriptreact",
    "description": "getStaticProps infer-inplicit",
    "prefix": "ne:gsp-infer-inplicit",
    "body": [
      "import type { InferGetStaticPropsType } from 'next'",
      "",
      "type ${1:Data} = {",
      "  ${2:data1}: ${3|string,number|}",
      "  ${4:data2}: ${5|string,number|}",
      "}",
      "",
      "export const getStaticProps = async () => {",
      "  const res = await fetch('${7:http://example.com}')",
      "  const ${6:datas}: $1[] = await res.json()",
      "",
      "  return {",
      "    props: {",
      "      $6,",
      "    },",
      "    // revalidate: 3600",
      "  }",
      "}",
      "",
      "function ${8:TransedData}({ $6 }: InferGetStaticPropsType<typeof getStaticProps>) {",
      "  // will resolve datas to type $1[]",
      "}",
      "",
      "export default $8"
    ],
  },
  "Next ServerSideProps pure": {
		"scope": "typescript,typescriptreact",
    "description": "getServerSideProps pure",
    "prefix": "ne:ssp-pure",
    "body": [
      "import { GetServerSideProps } from 'next'",
      "",
      "type ${1:Data} = {",
      "  ${2:data1}: ${3|string,number|}",
      "  ${4:data2}: ${5|string,number|}",
      "}",
      "",
      "export const getServerSideProps: GetServerSideProps<{ ${6:datas}: $1[] }> = async ( context ) => {",
      "  const res = await fetch('${7:http://example.com}')",
      "  const $6: $1[] = await res.json()",
      "",
      "  return {",
      "    props: {",
      "      $6,",
      "    },",
      "  }",
      "}",
    ],
  },
  "Next ServerSideProps infer": {
		"scope": "typescript,typescriptreact",
    "description": "getServerSideProps infer",
    "prefix": "ne:ssp-infer",
    "body": [
      "import { InferGetServerSidePropsType, GetServerSideProps } from 'next'",
      "",
      "type ${1:Data} = {",
      "  ${2:data1}: ${3|string,number|}",
      "  ${4:data2}: ${5|string,number|}",
      "}",
      "",
      "export const getServerSideProps: GetServerSideProps<{ ${6:datas}: $1[] }> = async () => {",
      "  const res = await fetch('${7:http://example.com}')",
      "  const $6: $1[] = await res.json()",
      "",
      "  return {",
      "    props: {",
      "      $6,",
      "    },",
      "    // revalidate: 3600",
      "  }",
      "}",
      "",
      "function ${8:TransedData}({ $6 }: InferGetServerSidePropsType<typeof getServerSideProps>) {",
      "  // will resolve datas to type $1[]",
      "}",
      "",
      "export default $8"
    ],
  },
  "Next ServerSideProps infer inplicit": {
		"scope": "typescript,typescriptreact",
    "description": "getServerSideProps infer-inplicit",
    "prefix": "ne:ssp-infer-inplicit",
    "body": [
      "import type { InferGetServerSidePropsType } from 'next'",
      "",
      "type ${1:Data} = {",
      "  ${2:data1}: ${3|string,number|}",
      "  ${4:data2}: ${5|string,number|}",
      "}",
      "",
      "export const getServerSideProps = async () => {",
      "  const res = await fetch('${7:http://example.com}')",
      "  const ${6:datas}: $1[] = await res.json()",
      "",
      "  return {",
      "    props: {",
      "      $6,",
      "    },",
      "    // revalidate: 3600",
      "  }",
      "}",
      "",
      "function ${8:TransedData}({ $6 }: InferGetServerSidePropsType<typeof getServerSideProps>) {",
      "  // will resolve datas to type $1[]",
      "}",
      "",
      "export default $8"
    ],
  },
  "Next App dir": {
		"scope": "typescriptreact",
    "description": "next func component",
    "prefix": "neapp:page",
    "body": [
      "import Image from 'next/image'",
      "import { NextPage } from 'next'",
      "",
      "",
      "interface Props {",
      "  userAgent?: string;",
      "}",
      "",
      "const Page = async () => {",
      "  // const a = await fetch(\"${1:url}\", {cache: \"no-cache\"})",
      "  return (",
      "",
      "    <main className=\"\">",
      "      <h1>page</h1>",
      "    </main>",
      "  )",
      "}",
      "",
      "export default Page",
    ]
  }
}
