{
  // Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and 
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
  // same ids are connected.
  // Example:
  "Components": {
    "description": "component",
    "prefix": "compo",
    "body": [
      "import React { useEffect, useState, useContext, useReducer, useRef, useMemo } from 'react'",
      "",
      "const ${1:components} = () =>  {",
      "  return (",
      "    <>",
      "      <div>$1</div>",
      "    </>",
      "  )",
      "}",
      "",
      "export default $1"
    ],
  },
  "Components Arg": {
    "description": "component with arg ",
    "prefix": "comarg",
    "body": [
      "import React from 'react'",
      "",
      "type Props = {",
      "  ${2:arg}: string",
      "}",
      "",
      "const ${1:components} = ({${2:arg}}: Props) =>  {",
      "  return (",
      "    <>",
      "      <div>$1</div>",
      "    </>",
      "  )",
      "}",
      "",
      "export default $1"
    ],
  },
  "Props": {
    "description": "props",
    "prefix": "props",
    "body": [
      "type Props = {",
      "  ${1:arg}: {2|string,number,boolean|}",
      "}",
    ],
  },
  "redux store": {
    "description": "redux store (raw)",
    "prefix": "rdx:str&hst",
    "body": [
      "import { createStore, combineReducers, applyMiddleware, compose, } from 'redux';",
      "import { connectRouter, routerMiddleware } from 'connected-react-router'",
      "import { createBrowserHistory } from 'history';",
      "import { ${1:myReducer} } from './${2:MyState}/reducer';",
      "import * as H from 'history';",
      "import thunk from 'redux-thunk';",
      "",
      "const history = createBrowserHistory()",
      "",
      "// reducerの結合",
      "const reducers = combineReducers({",
      "  router: connectRouter(history),",
      "  ${3:myState}: $1,",
      "})",
      "",
      "// ミドルウェアの統合",
      "const middlewares = applyMiddleware(",
      "// storeと接続",
      "routerMiddleware(history),",
      "// 非同期処理用のミドルウェア",
      "  thunk",
      ")",
      "",
      "// ストア生成関数",
      "const storeCreator = () => {",
      "return createStore(",
      "  reducers,",
      "  middlewares",
      ")",
      "}",
      "",
      "// ストアの生成",
      "const store = storeCreator()",
      "",
      "export type RootStateType = ReturnType<typeof reducers>         // === ReturnType<typeof store.getState>",
      "export type AppDispatch = typeof store.dispatch",
      "export { history };",
      "export default store;",
    ],
  },
  "redux types": {
    "description": "redux types (raw)",
    "prefix": "rdx:types",
    "body": [
      "import { Action } from 'redux';",
      "import { ThunkAction } from 'redux-thunk';",
      "",
      "type ${1:MyState} = {",
      "  // mydata",
      "  // data: myData[],",
      
      "  // elements: {",
      "  //   elementsData: {",
      "  // myDatas keyname",
      "  // [key in keyof myData]: string,",
      "  // excludetype",
      "  // sortDirection: Exclude<string, boolean>",
      "  //   },",
      "}",
      "const ${2:MyActionType} = {",
      "  ${3:${3:myAction}}: '${4:My_ACTION}',",
      "  // ${3:myAction}2: 'My_ACTION_2',",
      "} as const;",
      "type $2 = keyof typeof $2",
      "type ${5:MyAction} = Action<typeof $2.$3> & {",
      "  // data: myData,",
      "}",
      "type MachinesAction = $5 // | MyAction2",
      "export {",
      "  type $1,",
      "  type $5,",
      "  $2,",
      "}",
    ],
  },
  "redux action": {
    "description": "redux action (raw)",
    "prefix": "rdx:action",
    "body": [
      "import { Action, ActionCreator } from 'redux';",
      "import { ${1:ActionType} } from './types';",
      "",
      "export const ${2:MyAction}: $1 = {",
      "  type: $1.${3:${3:myAction}},",
      "  // Writing payload below like",
      "  // data: myData,",
      "}",
    ],
  },
  "redux reducer": {
    "description": "redux reducer (raw)",
    "prefix": "rdx:reducer",
    "body": [
      "import { ${1:MyState}, ${2:MyAction}, ${3:MyActionType} } from './types'",
      "import { Reducer } from 'redux';",
      "",
      "export const ${4:myReducer}: Reducer<$1, $2> = (state = initialState, action): $1 => {",
      "",
      "  switch (action.type) {",
      "    case $3.${4:${3:myAction}}:",
      "      return {",
      "        ...state,",
      "",
      "        // Writing payload below like",
      "        // ...myData,",
      "",
      "  }",
      "}"
    ],
  },
  "redux operation": {
    "description": "redux operation (raw)",
    "prefix": "rdx:ope",
    "body": [
      "import { ${1:${3:myAction}} } from './action'",
      "import { ThunkAction } from 'redux-thunk'",
      "import { ${2:ActionType}, $3{StateType} } from './types'",
      "import { RootStateType } from 'reducks/store'",
      "",
      "export const $1thunk = (): ThunkAction<Promise<void>, RootStateType, undefined, $2> => {",
      "  return async (dispatch, getState) => {",
      "    const ${3:myState} = getState().$3.value",
      "    dispatch(${3:myAction})",
      "",
      "  }",
      "}",
    ],
  },
  "redux-toolkit store": {
    "description": "redux-toolkit store",
    "prefix": "rdxt:str&hst",
    "body": [
      "import { configureStore, MiddlewareArray, combineReducers, applyMiddleware, getDefaultMiddleware, Middleware, } from '@reduxjs/toolkit';",
      "import { connectRouter, routerMiddleware } from 'connected-react-router'",
      "import { createBrowserHistory } from 'history';",
      "import { ${1:myReducer} } from './${2:MyState}/reducer';",
      "import * as H from 'history';",
      "import thunk from 'redux-thunk';",
      "",
      "const history = createBrowserHistory()",
      "const router = connectRouter(history)",
      "",
      "// reducerの結合",
      "const reducers = combineReducers({",
      "  router: router,",
      "  ${3:myState}: $1,",
      "})",
      "",
      "// ミドルウェアの統合",
      "// const middlewares = [",
      "//   // storeと接続",
      "//   routerMiddleware(history),",
      "//   thunk,",
      "// ] as const",
      "",
      "// const middlewares2 = new MiddlewareArray().concat(thunk, routerMiddleware(history))",
      "",
      "// ストア生成関数",
      "const store = configureStore({",
      "  reducer: reducers,",
      "  middleware: (getDefaultMiddleware) =>",
      "    getDefaultMiddleware().prepend(",
      "      routerMiddleware(history)",
      "    )",
      "})",
      "",
      "// ストアの生成",
      "const store = storeCreator()",
      "",
      "export type RootStateType = ReturnType<store.getState>         // === ReturnType<typeof reducers>",
      "export type AppDispatch = typeof store.dispatch",
      "export { history };",
      "export default store;",
    ],
  },
  "redux use": {
    "description": "redux use (raw)",
    "prefix": "rdx:use",
    "body": [
      "const dispatch = useDispatch()",
      "const sortData = [...useSelector((state: RootState) => state.${1:myState}, shallowEqual)]"
    ],
  },
  "redux-toolkit hooks": {
    "description": "redux-toolkit hooks",
    "prefix": "rdxt:hooks",
    "body": [
      "import { useDispatch, useSelector } from 'react-redux'",
      "import type { TypedUseSelectorHook } from 'react-redux'",
      "import type { RootState, AppDispatch } from './store'",
      
      // U"se throughout your app instead of plain `useDispatch` and `useSelector`",
      "export const useAppDispatch: () => AppDispatch = useDispatch",
      "export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector",
    ],
  },
  "redux-toolkit slice": {
    "description": "redux-toolkit slice",
    "prefix": "rdxt:slice",
    "body": [
      "import { createSlice } from '@reduxjs/toolkit'",
      "import type { PayloadAction } from '@reduxjs/toolkit'",
      "import type { RootState } from '../../app/store'",
      
      "// Define a type for the slice state",
      "interface ${1:MyState} {",
      "  // value: number",
      "}",
      
      "// Define the initial state using that type",
      "const initialState: $1 = {",
      "  // value: 0,",
      "}",
      
      "export const counterSlice = createSlice({",
      "  name: '${2:myState}',",
      "  initialState,",
      "  reducers: {",
      "    ${3:myAction}: (state, action: PayloadAction<number>) => {",
      "      ...state.value,",
      "      ...action.payload",
      "    },",
      "  },",
      "})",
      "",
      "export const { $3, } = counterSlice.actions",
      "export const selectCount = (state: RootState) => state.counter.value",
      "export default counterSlice.reducer",
    ],
  },
  "redux-toolkit use": {
    "description": "redux-toolkit use",
    "prefix": "rdxt:use",
    "body": [
      "const dispatch = useAppDispatch()",
      "const ${1:variable} = useAppSelector((state) => state.${2:myState}.value, shallowEqual)",
    ],
  }
}